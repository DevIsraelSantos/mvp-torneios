datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  torneios Tournaments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Tournaments {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  status       Boolean @default(true) // true = aberto, false = fechado
  numberOfSets Int     @default(1) // n√∫mero de sets por partida

  winPoints Int @default(1)
  lossScore Int @default(0)

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  spaces Spaces[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Spaces {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tournament   Tournaments? @relation(fields: [tournamentId], references: [id])
  tournamentId String?      @db.ObjectId
}
