datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String? @db.ObjectId

  userTenant   UserTenant?
  userTenantId String?     @db.ObjectId
}

model UserTenant {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String
  role  UserRole @default(USER)

  isActive Boolean @default(true)
  points   Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?  @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  userId   String? @unique @db.ObjectId
  tenantId String  @db.ObjectId

  achievements         Achievement[] @relation("UserTenantAchievements")
  approvedAchievements Achievement[] @relation("UserTenantApprovedAchievements")
}

model Tenant {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())

  users       User[]
  userTenant  UserTenant[]
  missions    Mission[]
  rewards     Reward[]
  Achievement Achievement[]
}

model LoginAttempts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Mission {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  points      Int
  isEnable    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @db.ObjectId

  achievements Achievement[]
}

model Reward {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  points         Int
  isEnable       Boolean
  isUniqueReedem Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @db.ObjectId
}

enum AchievementStatus {
  PENDING
  APPROVED
  REJECTED
}

model Achievement {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  evidence String
  status   AchievementStatus @default(PENDING)

  creator   UserTenant @relation(fields: [creatorId], references: [id], onDelete: Cascade, name: "UserTenantAchievements")
  creatorId String     @db.ObjectId

  reviewer   UserTenant? @relation(fields: [reviewerId], references: [id], onDelete: Cascade, name: "UserTenantApprovedAchievements")
  reviewerId String?     @db.ObjectId
  feedback   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mission   Mission @relation(fields: [missionId], references: [id])
  missionId String  @db.ObjectId

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @db.ObjectId
}
