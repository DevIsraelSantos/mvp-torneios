datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  torneios Tournaments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum TournamentCategories {
  ROUND_ROBIN // todos contra todos
  SWISS_SYSTEM // sistema suíço 
  KNOCKOUT // mata-mata
  DOUBLE_KNOCKOUT // mata-mata duplo
}

model Tournaments {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  status       Boolean @default(true) // true = aberto, false = fechado
  numberOfSets Int     @default(1) // número de sets por partida

  category TournamentCategories @default(ROUND_ROBIN) // tipo de torneio

  winPoints  Int @default(1)
  lossPoints Int @default(0)

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  spaces  Spaces[]
  teams   Teams[]
  matches Matches[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
}

model Spaces {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tournament   Tournaments? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String?      @db.ObjectId

  matches Matches[]

  @@unique([name, tournamentId])
}

model Teams {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tournament   Tournaments? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String?      @db.ObjectId

  players String[]

  matchLeft   Matches[] @relation("MatchesTeamLeft")
  matchRight  Matches[] @relation("MatchesTeamRight")
  matchWinner Matches[] @relation("MatchesWinner")

  scoresLeft  Scores[] @relation("ScoreTeamLeft")
  scoresRight Scores[] @relation("ScoreTeamRight")
}

enum MatchStatus {
  PENDING // aguardando
  IN_PROGRESS // em andamento
  FINISHED // finalizado
}

enum GameStatus {
  PLAYED
  WO
  DOUBLE_WO
}

model Matches {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  teamLeft   Teams?  @relation(fields: [teamLeftId], references: [id], onDelete: Cascade, name: "MatchesTeamLeft")
  teamLeftId String? @db.ObjectId

  teamRight   Teams?  @relation(fields: [teamRightId], references: [id], onDelete: Cascade, name: "MatchesTeamRight")
  teamRightId String? @db.ObjectId

  round       Int
  matchNumber Int
  status      MatchStatus @default(PENDING)
  gameStatus  GameStatus?

  space    Spaces? @relation(fields: [spacesId], references: [id], onDelete: Cascade)
  spacesId String? @db.ObjectId

  winner   Teams?  @relation(fields: [winnerId], references: [id], onDelete: Cascade, name: "MatchesWinner")
  winnerId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tournament   Tournaments? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String?      @db.ObjectId

  scores Scores[]
}

model Scores {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  position Int // Posição do set no game (1, 2, 3...)

  teamLeft   Teams?  @relation(fields: [teamLeftId], references: [id], onDelete: Cascade, name: "ScoreTeamLeft")
  teamLeftId String? @db.ObjectId

  teamRight   Teams?  @relation(fields: [teamRightId], references: [id], onDelete: Cascade, name: "ScoreTeamRight")
  teamRightId String? @db.ObjectId

  scoreLeft  Int
  scoreRight Int

  match   Matches @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
